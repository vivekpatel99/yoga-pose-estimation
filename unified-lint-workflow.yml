name: Unified Lint Workflow (Python CI/CD Tools)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      languages:
        description: "Comma-separated list of languages to lint"
        required: false
        default: "python,yaml,json,markdown"
      enable_auto_fix:
        description: "Enable auto-fixing (use with caution)"
        type: boolean
        default: true
      target_dir:
        description: "Target directory to lint (relative to repo root)"
        required: false
        default: "."
      branch_prefix:
        description: "Branch name prefix for fixes"
        required: false
        default: "fix/super-linter-full-scan"

permissions:
  contents: write
  packages: read
  statuses: write
  pull-requests: write
  issues: write

jobs:
  unified-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Clone CI/CD Tools
        run: |
          git clone https://github.com/Maris-Stella-Labs/cicd-tools.git cicd-tools
          cd cicd-tools
          git checkout 6ac16b64c7820e6b43afb3307898aa3265fa7c80
          poetry install --no-interaction

      - name: Run Unified Lint Workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          cd cicd-tools
          python -m scripts_app.scripts.unified_lint_workflow \
            --languages "${{ github.event.inputs.languages || 'python,javascript,typescript,yaml,json,markdown' }}" \
            --output-dir ../super-linter-output \
            --branch-prefix "${{ github.event.inputs.branch_prefix || 'fix/super-linter-full-scan' }}" \
            --save-results ../unified-lint-results.json \
            ${{ github.event.inputs.enable_auto_fix == 'true' && '--enable-auto-fix' || '--no-auto-fix' }}

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unified-lint-results
          path: |
            super-linter-output/
            unified-lint-results.json
          retention-days: 30

      - name: Create Summary Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Read results if available
              let results = {};
              if (fs.existsSync('unified-lint-results.json')) {
                results = JSON.parse(fs.readFileSync('unified-lint-results.json', 'utf8'));
              }
              
              const comment = `## üîç Unified Lint Workflow Results
              
              **Status**: ${results.success ? '‚úÖ Success' : '‚ùå Failed'}
              **Trigger**: ${context.eventName === 'schedule' ? 'Scheduled Run' : 'Manual Trigger'}
              **Languages Checked**: ${results.languages_checked || 'N/A'}
              **Files Scanned**: ${results.files_scanned || 'N/A'}
              **Issues Found**: ${results.issues_found || 'N/A'}
              **Auto-fixes Applied**: ${results.auto_fixes_applied || 'N/A'}
              **Branch Created**: ${results.branch_created || 'N/A'}
              **PR Created**: ${results.pr_created || 'N/A'}
              
              ${results.error_message ? `**Error**: ${results.error_message}` : ''}
              
              ${results.pr_url ? `**Pull Request**: ${results.pr_url}` : ''}
              
              ---
              *Generated by Python CI/CD Tools*`;
              
              // Create a new issue for scheduled runs, or comment on the workflow run
              if (context.eventName === 'schedule') {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Daily Lint Scan - ${new Date().toISOString().split('T')[0]}`,
                  body: comment,
                  labels: ['automated', 'linting', 'ci-cd']
                });
              }
            } catch (error) {
              console.log('Could not create summary:', error.message);
            }
